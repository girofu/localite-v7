---
description: '執行任務清單中的任務項目，並且必須依照執行任務方式的方式執行，執行後根據紀錄清單來紀錄遭遇的問題與修正方式。'
globs:
alwaysApply: false
---

# Develop by Task Rule (TDD + Agent-Driven Version)

version: 1.4.0
changeLog:

- 2025-08-24: 📝 簡化文檔內容，移除詳細程式碼改為引用相關文件
- 2025-08-24: 🔧 新增 setup-test-templates.sh 腳本處理測試模板選擇
- 2025-08-24: 🔄 優化執行流程，使用引用式架構提高可維護性
- 2025-08-24: 🧪 整合測試模板與 TDD 最佳實踐文檔
- 2025-08-24: 🔄 修改執行流程支援自動測試模板選擇
- 2025-08-24: 📋 增加測試品質檢查與驗證步驟
- 2025-08-22: 新增 Agent Prompts 整合系統
- 2025-08-22: 新增終端機指令規範文件
- 2025-08-22: 新增環境參數使用決策樹
- 2025-08-15: 新增 TDD 開發週期
- 2025-08-15: 新增環境變數驗證
- 2025-08-15: 新增程式碼影響分析
- 2025-08-15: 新增測試環境配置指南
- 2025-08-15: 新增測試策略決策
- 2025-08-15: 新增錯誤記錄

## 功能描述

本規則遵循**測試驅動開發 (Test-Driven Development, TDD)** 原則，並整合**專業 Agent Prompts** 輔助系統。

執行 "任務清單" 中的 "任務項目"，透過「紅-綠-重構」的開發週期，先撰寫失敗的測試案例，再撰寫最精簡的程式碼使其通過，最後進行重構，確保程式碼品質與功能的正確性。開發過程中根據不同組件類型自動套用相應的 Agent Prompt 指導。執行後根據 "紀錄清單" 來紀錄遭遇的問題與修正方式。

## 參數說明

### 1. 任務清單 (Task List)

- **用途**: 指定包含任務項目的清單文件
- **預設值**: `@tasks-localite-prd.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

### 2. 任務項目 (Task Item)

- **用途**: 指定要執行的具體任務項次
- **預設值**: 根據 `@tasks-localite-prd.mdc` 的未完成最近項目
- **格式**: 任務編號 (例如: `2.5.1`, `1.6.2.3`)

### 3. task list 使用方法 (Task List Usage Method)

- **用途**: 指定 task list 的使用方法
- **預設值**: `@process-task-list.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

### 4. 紀錄清單使用方法 (Record List Usage Method)

- **用途**: 指定記錄問題與修正方式的文件使用方法
- **預設值**: `@dev-record-localite-v6.mdc`
- **格式**: `@filename.mdc` 或 rule 指令

### 5. 終端機指令規範 (Terminal Commands Reference) - 新增

- **用途**: 統一的終端機指令執行規範
- **預設值**: `@terminal-commands.mdc`
- **格式**: 固定文件參考

### 6. Agent Prompts 整合系統 (Agent Prompts Integration System) - 新增

- **用途**: 統一的 Agent Prompts 整合系統
- **預設值**: `@agent-prompts.mdc`
- **格式**: 固定文件參考

### 7. 程式碼風格 (Coding Style Guide) - 新增

- **用途**: 統一的程式碼風格指南
- **預設值**: `@coding-style-guide.mdc`
- **格式**: 固定文件參考

### 8. TDD 開發循環 (TDD Development Cycle) - 新增

- **用途**: 統一的 TDD 開發循環指南
- **預設值**: `@tdd-development-rule.mdc`
- **格式**: 固定文件參考

### 9. 完整開發架構與實施指南 (Full Development Framework and Implementation Guide) - 新增

- **用途**: 統一的完整開發架構與實施指南
- **預設值**: `@development-design.mdc`
- **格式**: 固定文件參考

## 使用方式

### 完整語法

```
@develop-by-task
1. [任務清單]
2. [任務項目]
3. [task list 使用方法]
4. [紀錄清單使用方法]
5. [終端機指令規範]
6. [Agent Prompts 整合系統]
7. [程式碼風格]
8. [TDD 開發循環]
9. [完整開發架構與實施指南]
```

### 使用範例

#### 範例 1: 預設值

```
@develop-by-task
1. [任務清單] @tasks-localite-prd.mdc
2. [任務項目] x.x
3. [task list 使用方法] @process-task-list.mdc
4. [紀錄清單使用方法] @dev-record-localite-v6.mdc
5. [終端機指令規範] @terminal-commands.mdc
6. [Agent Prompts 整合系統] @agent-prompts.mdc
7. [程式碼風格] @coding-style-guide.mdc
8. [TDD 開發循環] @tdd-development-rule.mdc
9. [完整開發架構與實施指南] @development-design.mdc
```

#### 範例 2: 指定任務項目，預設值參數全選

```
@develop-by-task
all
x.x
```

#### 範例 2: 自動選擇未完成任務，根據指定任務項目由系統自動選擇參數

```
@develop-by-task
auto
```

#### 範例 3: 根據指定任務項目由系統自動選擇參數

```
@develop-by-task
auto
x.x
```

## 執行流程

### Phase 1: 任務準備與分析

#### 1.1 讀取任務清單

```bash
# 查看任務清單
cat tasks-localite-prd.mdc | grep -E "^\s*- \[ \]"

# 選擇任務（自動或手動）
# 自動：選擇最高優先級未完成任務
# 手動：指定任務編號（如 2.5.1）
```

#### 1.2 選擇對應的 Agent Prompt 與測試模板

根據任務類型，系統自動載入對應的 Agent Prompt 和測試模板：

| 任務類型                 | Agent Prompt               | 主要測試模板                                             | 適用範圍               |
| ------------------------ | -------------------------- | -------------------------------------------------------- | ---------------------- |
| Frontend (1.5, 2.5, 3.4) | Frontend Development Agent | `unit-test.template.ts`                                  | React Native, UI 元件  |
| Backend (1.2, 2.2, 3.1)  | Backend Development Agent  | `unit-test.template.ts` + `integration-test.template.ts` | Node.js, API, Services |
| Database (1.3, 2.1, 4.1) | Database Design Agent      | `integration-test.template.ts`                           | MongoDB, Redis, Schema |
| DevOps (6.1, 6.2, 8.0)   | DevOps Engineer Agent      | `integration-test.template.ts` + `e2e-test.template.ts`  | CI/CD, 部署, 監控      |
| Testing (所有任務)       | Testing Specialist Agent   | 全部模板                                                 | 測試策略, TDD 指導     |

#### 1.2.1 自動測試模板選擇邏輯

```bash
# 根據任務編號自動選擇測試模板

# 0.4 架構規範 → 單元測試模板
if [[ "$task_id" =~ ^0\.4 ]]; then
  template="unit-test.template.ts"
  test_type="unit"
fi

# 1.1 資料庫 → 整合測試模板
if [[ "$task_id" =~ ^1\.1 ]]; then
  template="integration-test.template.ts"
  test_type="integration"
fi

# 1.2 API 開發 → 單元測試 + E2E 測試
if [[ "$task_id" =~ ^1\.2 ]]; then
  template="unit-test.template.ts integration-test.template.ts"
  test_type="unit integration"
fi

# 3.2 即時聊天 → E2E 測試模板
if [[ "$task_id" =~ ^3\.2 ]]; then
  template="e2e-test.template.ts"
  test_type="e2e"
fi
```

#### 1.3 環境變數檢查與配置

##### 環境檔案對應表

| 環境   | 配置檔案           | 用途       | 使用時機           |
| ------ | ------------------ | ---------- | ------------------ |
| 開發   | `.env.development` | 本地開發   | 日常開發、功能實作 |
| 測試   | `.env.test`        | 自動化測試 | 執行測試套件       |
| 預生產 | `.env.staging`     | 預發布測試 | 功能驗證、UAT      |
| 生產   | `.env.production`  | 正式環境   | 線上服務           |

##### 環境變數驗證腳本

```bash
# 執行環境檢查
npm run env:check

# 切換環境
export NODE_ENV=development  # 或 test, staging, production
npm run env:load
```

### Phase 2: TDD 開發循環 (整合測試模板)

#### 🎯 TDD 核心概念與原則

**Test-Driven Development (TDD)** 是一種軟體開發方法論，遵循「測試先行」的核心理念。TDD 不只是測試策略，更是設計與開發的指導哲學。

詳細的 TDD 開發循環說明，請參考以下文件：

```
@tdd-development-rule.mdc
docs/tdd-guide.md
docs/testing-best-practices.md
```

#### 2.0 測試模板準備與初始化

##### 2.0.1 自動建立測試檔案

```bash
# 執行測試模板自動選擇腳本
./scripts/setup-test-templates.sh "$task_id" "$task_name"
```

**腳本功能說明**：

- 根據任務編號自動選擇適當的測試模板
- 建立對應的測試檔案到正確目錄
- 顯示相關文檔指引

**詳細模板選擇規則**: 參考 `scripts/setup-test-templates.sh`

##### 2.0.2 測試檔案客製化指引

**客製化檢查清單**: 參考 `docs/testing-best-practices.md#測試模板客製化`

**相關文檔**:

- 📘 **TDD 指南**: `docs/tdd-guide.md`
- 📗 **測試最佳實踐**: `docs/testing-best-practices.md`
- 🔧 **Mock 工具使用**: `backend/src/tests/mock-tools/`

### Phase 3: 整合與驗證 (含測試品質檢查)

#### 3.1 執行完整測試套件

```bash
# 🧪 執行 TDD 測試循環
echo "🚀 執行 TDD 測試循環..."

# 使用測試腳本執行對應的測試
./scripts/setup-test-templates.sh "$task_id" "$task_name" && \
npm run test:coverage
```

**測試執行策略**：

- 根據建立的測試檔案類型自動執行對應測試
- 單元測試、整合測試、E2E 測試的具體執行方式
- 測試覆蓋率檢查

**詳細測試執行指令**: 參考 `@terminal-commands.mdc`

#### 3.1.1 測試品質驗證

```bash
# 🔍 執行測試品質檢查
./scripts/setup-test-templates.sh "$task_id" "$task_name"
```

**品質檢查項目**: 參考 `docs/testing-best-practices.md#測試品質檢查`

**檢查內容包含**：

- Mock 工具使用檢查
- AAA 模式遵循驗證
- TestDataFactory 使用建議
- 測試命名規範檢查

#### 3.2 環境驗證流程

**環境配置指引**: 參考 `@terminal-commands.mdc` 和環境變數使用決策樹

##### Mock 測試 vs 整合測試決策矩陣

| 測試類型   | 使用 Mock | 使用真實服務 | 環境需求          |
| ---------- | --------- | ------------ | ----------------- |
| 業務邏輯   | ✅        | ❌           | 無                |
| 工具函數   | ✅        | ❌           | 無                |
| 外部 API   | ❌        | ✅           | `.env.test`       |
| 資料庫操作 | 部分      | ✅           | 測試資料庫        |
| 認證流程   | ❌        | ✅           | Firebase 測試專案 |

**詳細環境配置**: 參考文件中的「環境參數使用決策樹」章節

### Phase 4: 提交與部署 (含測試驗證)

#### 4.1 程式碼與測試檢查

```bash
# 🔍 執行完整程式碼品質檢查
npm run type-check && npm run lint && npm run format

# 🧪 執行最終測試驗證並檢查覆蓋率門檻
npm test && npm run test:coverage
```

**檢查項目**:

- TypeScript 類型檢查
- ESLint 程式碼檢查（包含測試檔案）
- Prettier 格式化
- 測試覆蓋率門檻驗證（≥85%）

**詳細指令說明**: 參考 `@terminal-commands.mdc`

#### 4.2 Git 提交流程

```bash
# 🗂️ 提交（遵循 Conventional Commits + 測試資訊）
git add .
git commit -m "feat(${task_name}): implement ${task_description} with TDD"
```

**提交訊息規範**: 參考 `@coding-style-guide.mdc#提交訊息規範`

#### 4.2.1 提交前檢查清單

**完整檢查清單**: 參考 `docs/testing-best-practices.md#提交前檢查清單`

**核心檢查項目**:

- ✅ 新功能有對應測試檔案
- ✅ 測試覆蓋率 ≥ 85%
- ✅ 所有測試通過
- ✅ 程式碼通過 lint 檢查

#### 4.3 功能旗標配置

**功能旗標使用規範**: 參考 `@development-design.mdc#功能旗標策略`

**核心原則**:

- 新功能必須包裹在功能旗標中
- 支援金絲雀部署和漸進式發布
- 程式碼範例參考開發設計文檔

## 🌍 環境參數使用決策樹 (新增)

### 環境參數選擇邏輯

根據不同的開發階段和測試需求，使用對應的環境參數：

```
┌─────────────────────┐
│   開始開發任務      │
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐
│  任務類型判斷       │
└──────────┬──────────┘
           │
    ┌──────┴──────┬─────────┬──────────┬───────────┐
    │             │         │          │           │
    ▼             ▼         ▼          ▼           ▼
┌────────┐  ┌────────┐  ┌────────┐  ┌────────┐  ┌────────┐
│本地開發│  │單元測試│  │整合測試│  │E2E測試 │  │部署    │
└────────┘  └────────┘  └────────┘  └────────┘  └────────┘
    │           │           │           │           │
    ▼           ▼           ▼           ▼           ▼
   .env     不需要      .env.test   .env.e2e   .env.[環境]
            環境參數
```

### 環境參數配置表

| 開發階段     | 環境檔案          | 用途         | 說明                          |
| ------------ | ----------------- | ------------ | ----------------------------- |
| **本地開發** | `.env`            | 本地開發環境 | 使用本地服務和資料庫          |
| **單元測試** | 無需環境檔        | 隔離測試     | 全部使用 Mock，不依賴外部服務 |
| **整合測試** | `.env.test`       | 真實服務測試 | 使用測試資料庫和 API Keys     |
| **E2E 測試** | `.env.e2e`        | 端對端測試   | 完整測試環境配置              |
| **預生產**   | `.env.staging`    | 預生產環境   | 功能旗標和監控開啟            |
| **生產**     | `.env.production` | 正式環境     | 生產資料庫和完整監控          |

### 環境參數使用原則

**詳細配置範例**: 參考 `docs/testing-best-practices.md#環境配置`

**環境切換指令**: 參考 `@terminal-commands.mdc#環境切換`

**核心原則**:

- 單元測試使用 Mock，無需環境變數
- 整合測試使用真實服務和測試環境變數
- 不同環境使用對應的 `.env` 檔案

## 自動任務選擇邏輯

當未指定任務項目時，系統將自動選擇：

1. 查找任務清單中所有未完成的任務 (`[ ]`)
2. 根據 MVP 優先級選擇最重要的任務
3. 考慮任務依賴關係，確保前置任務已完成
4. 優先選擇可平行執行的任務
5. 選擇層級最深的未完成任務（子任務優先）
6. 如果同層級有多個未完成任務，選擇編號最小的

## 注意事項

1. **Agent 輔助開發**: 讓 Agent Prompt 指導你避免過度設計和不必要的測試
2. **環境參數選擇**: 嚴格按照決策樹選擇正確的環境檔案
3. **終端機規範**: 所有指令執行必須遵循標準化指令集
4. **測試先行**: 嚴格遵守先寫測試再寫程式碼的原則
5. **小步前進**: 每次只寫一個失敗的測試，避免批量開發
6. **重構勿忘**: 「紅-綠」之後必須進行重構
7. **信任測試**: 只要測試通過就有信心重構
8. **避免過度**: Agent 會提醒避免過度工程和過度測試

## 🧪 測試模板使用指南

### 📁 測試模板概覽

| 模板檔案                       | 適用場景 | 主要功能           | 建議使用時機                   |
| ------------------------------ | -------- | ------------------ | ------------------------------ |
| `unit-test.template.ts`        | 單元測試 | 測試單一函數或類別 | 0.4 架構規範、1.2 API 開發     |
| `integration-test.template.ts` | 整合測試 | 測試多組件協作     | 1.1 資料庫設置、2.1 認證整合   |
| `e2e-test.template.ts`         | E2E 測試 | 測試完整業務流程   | 1.2 API 完整流程、3.2 即時聊天 |

### 🔧 測試工具速查表

#### Mock 工具 (`@tests/mock-tools`)

**詳細使用範例**: 參考 `backend/src/tests/mock-tools/index.ts`

**主要功能**:

- Mock Repository 快速建立
- 自訂 Mock Service 工廠
- TestDataFactory 測試資料產生器
- MockManager 生命週期管理

### 📊 測試覆蓋率要求

| 指標       | 最低要求 | 建議目標 | 檢查指令                |
| ---------- | -------- | -------- | ----------------------- |
| 語句覆蓋率 | 85%      | 90%+     | `npm run test:coverage` |
| 分支覆蓋率 | 80%      | 85%+     | `npm run test:coverage` |
| 函數覆蓋率 | 85%      | 90%+     | `npm run test:coverage` |
| 行數覆蓋率 | 85%      | 90%+     | `npm run test:coverage` |

### 📖 相關文檔快速連結

- 📘 **完整 TDD 指南**: `docs/tdd-guide.md`
- 📗 **測試最佳實踐**: `docs/testing-best-practices.md`
- 🔧 **Mock 工具文檔**: `backend/src/tests/mock-tools/index.ts`
- 📋 **測試模板目錄**: `backend/src/tests/templates/`

## 與其他 Rule 的關聯

### 核心依賴

- **執行流程**: `@process-task-list.mdc` - 任務執行流程規範
- **終端指令**: `@terminal-commands.mdc` - 終端機指令規範
- **開發設計**: `@development-design.mdc` - 完整開發架構指南
- **程式碼風格**: `@coding-style-guide.mdc` - 編碼標準和提交規範

### 測試相關依賴 (新增)

- **TDD 指南**: `docs/tdd-guide.md` - TDD 開發完整指南
- **測試最佳實踐**: `docs/testing-best-practices.md` - 測試最佳實踐文檔
- **測試模板庫**: `backend/src/tests/templates/` - 單元/整合/E2E 測試模板
- **Mock 工具**: `backend/src/tests/mock-tools/` - 統一的 Mock 和測試工具
- **測試腳本**: `scripts/setup-test-templates.sh` - 自動測試模板選擇腳本

### 輸入輸出

- **輸入**: `@tasks-localite-prd.mdc` - 項目任務清單
- **輸出**: `@dev-record.mdc` - 問題記錄和經驗分享

### 外部整合

- **Agent 指導**: Agent Prompts Library - 專業開發指導
- **服務整合**: Firebase Authentication, MongoDB, Redis, 功能旗標服務
