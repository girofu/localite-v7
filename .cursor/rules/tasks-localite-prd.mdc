---
alwaysApply: false
---

# 在地人 AI 導覽系統 - 任務規劃 v4 (優化版)

## 📋 核心需求與架構原則

✅ **開發策略**: TDD + Agent-Driven + TypeScript 優先
✅ **架構模式**: MVC + Local-First + WebSocket
✅ **部署策略**: 功能旗標 + 金絲雀部署
✅ **平台支援**: Android/iOS + Web + 環境分離

## 📁 專案檔案結構

### Backend (TypeScript + MVC)

```
backend/
├── src/
│   ├── models/              # Model層 - 資料模型與驗證
│   │   ├── User.model.ts, Tour.model.ts, Chat.model.ts
│   ├── controllers/         # Controller層 - API 路由處理
│   │   ├── auth.controller.ts, tour.controller.ts, chat.controller.ts
│   ├── services/            # Service層 - 商業邏輯
│   │   ├── websocket.service.ts, ai.service.ts, logger.service.ts
│   ├── config/              # 環境配置管理
│   │   ├── env.development.ts, env.production.ts, env.test.ts
│   ├── websockets/          # WebSocket 即時通訊
│   │   ├── chat.gateway.ts, events.handler.ts
│   └── tests/               # TDD 測試套件
│       ├── unit/, integration/, e2e/
```

### Mobile App (React Native + TypeScript)

```
mobile/
├── src/
│   ├── models/, controllers/, services/    # MVC 架構
│   ├── screens/, components/               # UI 層
│   ├── storage/                            # 本地存儲 (Local-First)
│   │   ├── database.ts, cache.ts, sync.manager.ts
│   └── config/                             # 環境配置
├── android/, ios/                          # 原生平台配置
```

### DevOps & 部署

```
devops/
├── kubernetes/              # K8s 金絲雀部署
├── monitoring/              # Log 收集與監控
└── ci-cd/                  # 自動化建置流程
```

## 🎯 任務執行清單

### 0.0 環境與架構準備 🔴 (必須依序執行)

#### 0.1 TypeScript 開發環境建置 ⏱️ 4h

**依賴**: 無
**說明**: 建立完整的 TypeScript 開發基礎設施

- [x] **0.1.1 Node.js 環境安裝** ⏱️ 1h
  - **Note**: `package.json` 存在，專案可運行。
- [x] **0.1.2 TypeScript 編譯器配置** ⏱️ 1.5h
  - **Note**: `tsconfig.json` 已建立，TypeScript 依賴已安裝。
- [x] **0.1.3 程式碼品質工具設置** ⏱️ 1h
  - **Note**: 已完成所有程式碼品質工具配置：ESLint + Prettier + Git hooks + VSCode 設定。
- [x] **0.1.4 專案結構初始化** ⏱️ 0.5h
  - **Note**: `localite-app-main` 已建立，作為行動應用的部分。

#### ✅ 0.2 環境變數管理系統 ⏱️ 3h **[完成]**

**依賴**: 0.1 完成
**說明**: 多環境參數管理與安全性配置

- [x] **0.2.1 環境檔案結構建立** ⏱️ 1h
  - **Note**: 完成四環境配置檔案結構，包含開發、測試、預生產、生產環境。14/14 測試通過，建立環境驗證工具。
- [x] **0.2.2 環境變數驗證機制** ⏱️ 1h
  - **Note**: 完成動態環境載入器，20/20 測試通過。實現型別安全存取、全面驗證機制、單例模式性能優化。
- [x] **0.2.3 敏感資料加密存儲** ⏱️ 1h
  - **Note**: 完成企業級敏感資料加密系統，21/21 測試通過 (100%)。實現 AES-256-CBC + HMAC-SHA256 加密、智慧敏感檢測、CLI 工具、金鑰管理與輪替。

#### 0.3 TDD 測試框架建置 ⏱️ 5h

**依賴**: 0.1, 0.2 完成
**說明**: 完整的測試驅動開發環境

- [x] **0.3.1 Jest + TypeScript 配置** ⏱️ 2h
- [x] **0.3.2 測試覆蓋率與報告** ⏱️ 1h
  - **Note**: 完成覆蓋率報告系統，85% 語句覆蓋率。實現 Jest 覆蓋率檢查、覆蓋率門檻設定、覆蓋率報告生成。
- [x] **0.3.3 Mock 與測試工具** ⏱️ 1h
  - **Note**: 完成 Mock 工具庫，100% 覆蓋率。實現 Mock 工廠、Mock 管理器、Mock 資料產生器。
- [x] **0.3.4 測試模板與最佳實踐** ⏱️ 1h
  - **Note**: 完成測試模板庫，100% 覆蓋率。實現單元測試模板、整合測試模板、E2E 測試模板。

#### 0.4 MVC 架構規範制定 ⏱️ 4h

**依賴**: 0.1 完成
**說明**: 統一的架構模式與驗證工具

- [ ] **0.4.1 Model 層規範** ⏱️ 1h
- [ ] **0.4.2 Controller 層規範** ⏱️ 1h
- [ ] **0.4.3 Service 層規範** ⏱️ 1h
- [ ] **0.4.4 架構驗證工具** ⏱️ 1h

### 1.0 核心基礎建設 🔴 (部分可平行)

#### 1.1 資料庫與 ORM 設置 ⏱️ 6h 🟡

**依賴**: 0.1-0.4 完成
**說明**: MongoDB + Mongoose 整合與基礎模型

- [ ] **1.1.1 MongoDB 連線配置** ⏱️ 2h
- [ ] **1.1.2 Mongoose Schema 設計** ⏱️ 2h
- [ ] **1.1.3 資料存取層實作** ⏱️ 2h

#### 1.2 Web 框架與 API 基礎 ⏱️ 5h 🟡

**依賴**: 1.1 完成
**說明**: Express.js + TypeScript 的 RESTful API

- [ ] **1.2.1 Express 應用程式初始化** ⏱️ 2h
- [ ] **1.2.2 路由與控制器結構** ⏱️ 2h
- [ ] **1.2.3 API 文檔自動生成** ⏱️ 1h

### 2.0 使用者認證與權限 🔴

#### 2.1 Firebase Auth 整合 ⏱️ 6h

**依賴**: 1.1, 1.2 完成
**說明**: Firebase 認證服務與本地使用者系統整合

- [ ] **2.1.1 Firebase 專案設置** ⏱️ 1.5h
- [ ] **2.1.2 後端認證中介軟體** ⏱️ 2h
- [ ] **2.1.3 使用者資料同步** ⏱️ 1.5h
- [ ] **2.1.4 認證 API 端點** ⏱️ 1h

### 3.0 AI 導覽核心功能 🔴

#### 3.1 Google AI 整合 ⏱️ 8h

**依賴**: 2.1 完成
**說明**: AI 對話引擎與導覽邏輯

- [ ] **3.1.1 AI 服務抽象層** ⏱️ 2h
- [ ] **3.1.2 對話管理系統** ⏱️ 3h
- [ ] **3.1.3 導覽內容生成** ⏱️ 2h
- [ ] **3.1.4 AI 回應快取機制** ⏱️ 1h

#### 3.2 即時聊天系統 ⏱️ 10h

**依賴**: 1.2, 3.1 完成
**說明**: WebSocket 即時通訊與訊息處理

- [ ] **3.2.1 WebSocket 服務建立** ⏱️ 3h
- [ ] **3.2.2 即時訊息傳遞** ⏱️ 3h
- [ ] **3.2.3 訊息持久化** ⏱️ 2h
- [ ] **3.2.4 斷線重連機制** ⏱️ 2h

### 4.0 本地優先架構 🟡 (可平行開發)

#### 4.1 本地資料庫實作 ⏱️ 8h

**依賴**: 3.1 完成
**說明**: 離線功能與資料同步

- [ ] **4.1.1 SQLite 本地儲存** ⏱️ 3h
- [ ] **4.1.2 離線內容快取** ⏱️ 3h
- [ ] **4.1.3 資料同步策略** ⏱️ 2h

### 5.0 行動應用程式開發 🔴

#### 5.1 React Native 基礎建置 ⏱️ 10h

**依賴**: 0.1-0.4 完成
**說明**: 跨平台行動應用程式框架

- [x] **5.1.1 React Native CLI 專案初始化** ⏱️ 2h
  - **Note**: 專案使用 Expo 初始化，而非 React Native CLI。
- [x] **5.1.2 導航與狀態管理** ⏱️ 3h
  - **Note**: 完成 React Navigation 整合，建立 AuthContext、認證流程和主要 Tab 導航結構。
- [x] **5.1.3 UI 元件庫整合** ⏱️ 3h
  - **Note**: 已建立多個自訂 UI 元件 (`RouteCard`, `MiniCard` 等) 並有詳細文件 `COMPONENTS_GUIDE.md`。
- [x] **5.1.4 原生功能橋接** ⏱️ 2h
  - **Note**: 已整合 `expo-location`, `expo-camera`, `expo-image-picker` 並在畫面中使用。

#### 5.2 Android 建置流程 ⏱️ 6h 🟡

**依賴**: 5.1 完成
**說明**: Android 平台特定配置與發布

- [x] **5.2.1 Android 開發環境** ⏱️ 2h
  - **Note**: `app.json` 已包含 Android 相關配置。
- [ ] **5.2.2 Google Play 準備** ⏱️ 2h
- [x] **5.2.3 Android 特定功能** ⏱️ 2h
  - **Note**: `app.json` 已設定 `permissions`。

#### 5.3 iOS 建置流程 ⏱️ 6h 🟡

**依賴**: 5.1 完成
**說明**: iOS 平台特定配置與發布

- [x] **5.3.1 iOS 開發環境** ⏱️ 2h
  - **Note**: `app.json` 已包含 iOS 相關配置。
- [ ] **5.3.2 App Store 準備** ⏱️ 2h
- [x] **5.3.3 iOS 特定功能** ⏱️ 2h
  - **Note**: `app.json` 已在 `infoPlist` 中設定權限。

### 6.0 進階功能與優化 🟡 (優化階段)

#### 6.1 效能監控與 Log 系統 ⏱️ 8h

**依賴**: 3.2 完成
**說明**: 應用程式監控與日誌分析

- [ ] **6.1.1 集中式 Log 收集** ⏱️ 3h
- [ ] **6.1.2 效能監控儀表板** ⏱️ 3h
- [ ] **6.1.3 錯誤追蹤系統** ⏱️ 2h

#### 6.2 金絲雀部署系統 ⏱️ 12h

**依賴**: 所有核心功能完成
**說明**: 漸進式部署與功能旗標

- [ ] **6.2.1 功能旗標服務** ⏱️ 4h
- [ ] **6.2.2 Kubernetes 部署配置** ⏱️ 4h
- [ ] **6.2.3 自動回滾機制** ⏱️ 2h
- [ ] **6.2.4 CI/CD 流水線** ⏱️ 2h

## 📊 成功指標 (KPI)

### 技術指標

- **程式碼品質**: TypeScript 覆蓋率 > 95%, ESLint 錯誤 = 0
- **測試品質**: 測試覆蓋率 > 80%, TDD 流程遵循率 > 90%
- **效能指標**: API 響應 < 200ms, WebSocket 延遲 < 100ms
- **可用性**: 離線模式可用率 > 90%, 同步成功率 > 95%

### 使用者體驗

- **App Store 評分**: iOS/Android 均 > 4.5 分
- **載入速度**: 首次載入 < 3s, 後續頁面 < 1s
- **錯誤率**: 應用程式崩潰率 < 0.1%
- **同步效率**: 資料同步延遲 < 5 秒

### 營運指標

- **部署成功率**: 金絲雀部署成功率 > 95%
- **監控覆蓋**: Log 查詢響應 < 100ms, 監控告警 < 1min
- **開發效率**: 任務完成時間符合預估 ± 20%

---

## 📝 任務執行說明

### 圖例說明

- 🔴 **必須依序執行** - 有強依賴關係的任務
- 🟡 **可平行執行** - 無衝突的獨立任務
- 🟢 **獨立任務** - 可隨時執行的功能

### 時間預估

- ⏱️ **個人開發時間** - 基於經驗程式設計師的預估
- 包含 TDD 測試撰寫、code review、文檔撰寫時間
- 預留 20% 緩衝時間應對意外狀況

### 驗收標準

每個任務都有明確的 **驗收條件**，確保品質與完整性
